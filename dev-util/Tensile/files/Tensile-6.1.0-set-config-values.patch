diff --git a/Tensile/Common.py b/Tensile/Common.py
index 6ececf1c..c06c0441 100644
--- a/Tensile/Common.py
+++ b/Tensile/Common.py
@@ -357,7 +357,7 @@ validMFMA["B1k"] = validMFMA["H"]
 validMFMA["C"] = validMFMA["S"]
 validMFMA["Z"] = validMFMA["D"]
 validMFMA["X"] = [[32,32,4,1], [16,16,8,1]]
-validMFMA["F8"] = [[32,32,16,1], [16,16,32,1]]      
+validMFMA["F8"] = [[32,32,16,1], [16,16,32,1]]
 validMFMA["B8"] = validMFMA["F8"]
 validMFMA["F8B8"] = validMFMA["F8"]
 validMFMA["B8F8"] = validMFMA["F8"]
@@ -535,7 +535,7 @@ validParameters = {
     # Chooses how to do GlobalSplitU:
     # - SingleBuffer: uses atomic operation to accumulate on one buffer
     # - MultipleBuffer: each GSU group writes to its own buffer and the postGSU accumulates the buffer
-    # if GlobalSplitU=1, this parameter will be ignored (and will be set to SingleBuffer if it is 
+    # if GlobalSplitU=1, this parameter will be ignored (and will be set to SingleBuffer if it is
     # MultipleBuffer for consistency in lib logics).
     # GSU/GSUAlo can be used with all gemm types, except for I8II.
     # When GSU>1, we need extra kernels (other than the main assembly kernel) to do the computations. The language of these
@@ -777,7 +777,7 @@ validParameters = {
     #   - Optimizations enabled by AssertSummationElementMultiple>1 will be adjusted as follows.
     #     ASEM%GSU == 0 and ASEM//GSU will be used for optimizations instead of ASEM
     #     For example, if ASEM is 8 and GSU is 2, K is multiple of 8 but K is divided by GSU.
-    #     In that case, we can still guarantee K/GSU is multiple of 4 (= ASEM/GSU) and 
+    #     In that case, we can still guarantee K/GSU is multiple of 4 (= ASEM/GSU) and
     #     we can use ASEM//GSU=4 for optimizations
     #
     # 1 indicates no assertion (since all sizes are multiples of 1)
@@ -1429,7 +1429,7 @@ validParameters = {
     "MinVgprNumber":                list(range(0,256)),
 
     "MaxVgprNumber":                list(range(0,257)),
-    # min K size to use GlobalSplitU algorithm 
+    # min K size to use GlobalSplitU algorithm
     "MinKForGSU":                   [16,32,64,128,256]
     }
 
@@ -1680,7 +1680,7 @@ defaultProblemType = {
     "DataType":                 0,                # data types can specified by a variety of ways, such as "s", as listed in SolutionStructs.py::DataType
     "DestDataType":             0,                # destination data types can specified by a variety of ways, such as "s", as listed in SolutionStructs.py::DataType
     "ComputeDataType":          0,                # compute data types can specified by a variety of ways, such as "s", as listed in SolutionStructs.py::DataType
-    
+
     "UseBeta":                  True,             # =True use beta parameter (asm will check for B=0 and optimize the write for that), =False don't use beta parameter
     "HighPrecisionAccumulate":  False,            # f32 += f16*f16
     "SilentHighPrecisionAccumulate": False,       # Keep kernel names the same for HPA mode.  Useful for testing.
@@ -1801,12 +1801,12 @@ defaultProblemType = {
     # FP16 Alternate Implementation
     "Fp16AltImpl":              False,
     "Fp16AltImplRound":         False,
-    
-    # Use unpack version of up-conversion instruction for f8/b8. 
+
+    # Use unpack version of up-conversion instruction for f8/b8.
     "Fp8NoPackUpConversion" :   False,
 
-    # S/W clipping of f32 to f8/b8 down conversion. When it is set, the kernel clips any value which is greater 
-    # than max_f8_value (e.g., 240.0 for f8) to max_f8_value in down conversion. NaN and +/-INF are propagated. 
+    # S/W clipping of f32 to f8/b8 down conversion. When it is set, the kernel clips any value which is greater
+    # than max_f8_value (e.g., 240.0 for f8) to max_f8_value in down conversion. NaN and +/-INF are propagated.
     # By default, it is set for f8 kernels.
     "Fp32toFp8SWClip" :         True,
 
@@ -1815,11 +1815,11 @@ defaultProblemType = {
 
     # Rounding mode for f32 to f8 down conversion
     # TODO in Future:
-    # There are two different rounding modes for f32 to f8 down conversion: [0]: IEEE RNE mode and [1/2]: stochastic mode. 
-    # For stochastic mode, there are two implementations to use random numbers in H/W instruction: 
+    # There are two different rounding modes for f32 to f8 down conversion: [0]: IEEE RNE mode and [1/2]: stochastic mode.
+    # For stochastic mode, there are two implementations to use random numbers in H/W instruction:
     #   In-device [1]: we need to pass the seed of random number and kernel will generate the pseudo-random numbers
-    #   RND-table [2]: we need to pass a table of random numbers to the kernel, NOT implemented yet  
-    #"StochasticRounding" :     0  # [0,1,2]   0=NA, 1=in-device, 2=RND Table. By default, IEEE RNE rounding    
+    #   RND-table [2]: we need to pass a table of random numbers to the kernel, NOT implemented yet
+    #"StochasticRounding" :     0  # [0,1,2]   0=NA, 1=in-device, 2=RND Table. By default, IEEE RNE rounding
     }
 
 defaultProblemSizes = [{"Range": [ [2880], 0, 0 ]}]
@@ -2030,15 +2030,16 @@ def GetAsmCaps(isaVersion):
     if len(compilerVer) >= 2:
       ignoreCacheCheck = ignoreCacheCheck or \
                          compilerVer[0] < 5 or \
-                         (compilerVer[0] == 5 and compilerVer[1] <= 2) 
-      
+                         (compilerVer[0] == 5 and compilerVer[1] <= 2) or \
+                         (compilerVer[0] == 6 and compilerVer[1] <= 2)
+
     if not derivedAsmCaps["SupportedISA"] and CACHED_ASM_CAPS[isaVersion]["SupportedISA"]:
       printWarning("Architecture {} not supported by ROCm {}".format(isaVersion, globalParameters['HipClangVersion']))
       ignoreCacheCheck = True
 
     # check if derived caps matches asm cap cache
     if not ignoreCacheCheck and derivedAsmCaps != CACHED_ASM_CAPS[isaVersion]:
-      printExit("Cached asm caps differ from derived asm caps for {}".format(isaVersion))      
+      printExit("Cached asm caps differ from derived asm caps for {}".format(isaVersion))
     return derivedAsmCaps
   else:
     printWarning("Assembler not present, asm caps loaded from cache are unverified")
@@ -2319,7 +2320,7 @@ def assignGlobalParameters( config ):
 
   if "IgnoreAsmCapCache" in config:
     globalParameters["IgnoreAsmCapCache"] = config["IgnoreAsmCapCache"]
-    
+
   globalParameters["AsmCaps"] = {}
   globalParameters["ArchCaps"] = {}
 
